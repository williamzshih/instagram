generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  username  String     @unique
  name      String
  bio       String     @default("")
  avatar    String     @default("https://upload.wikimedia.org/wikipedia/commons/2/2c/Default_pfp.svg")
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  followers Follow[]   @relation("followers")
  following Follow[]   @relation("following")
  createdAt DateTime   @default(now())
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  caption   String // can be empty
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @db.ObjectId
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  createdAt DateTime   @default(now())
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follow {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  follower         User     @relation("following", fields: [followerEmail], references: [email], onDelete: Cascade) // TODO: better ref field
  followerEmail    String
  followee         User     @relation("followers", fields: [followeeUsername], references: [username], onDelete: Cascade) // TODO: better ref field
  followeeUsername String
  createdAt        DateTime @default(now())

  @@unique([followerEmail, followeeUsername])
}

// TODO: add session model
